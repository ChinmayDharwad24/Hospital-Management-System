/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.SystemAdminWorkspace;

import Hospital.City.CityDirectory;
import Hospital.Community.CommunityDirectory;
import Hospital.Doctor.Doctor;
import Hospital.Doctor.DoctorDirectory;
import Hospital.Hospital.HospitalDirectory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author chinm
 */
public class SystemDoctorPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorPanel
     */
    private DoctorDirectory doctorList;
    private CityDirectory cityList;
    private CommunityDirectory communityList;
    private HospitalDirectory hospitalList;
    
    public SystemDoctorPanel(DoctorDirectory doctorList,HospitalDirectory hospitalList,CityDirectory cityList,CommunityDirectory communityList) {
        initComponents();
        this.doctorList = doctorList;
        this.cityList = cityList;
        this.communityList = communityList;
        this.hospitalList = hospitalList;
        populateTable();
        populateHospital();
        populateCity();
        populateState();
        populateCountry();
        populateComm();
        btnClear.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPhNo = new javax.swing.JLabel();
        txtPhNo = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        scrollPaneDoctor = new javax.swing.JScrollPane();
        tableDoctor = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnEdit1 = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblRole = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtRole = new javax.swing.JTextField();
        lblAge = new javax.swing.JLabel();
        txtEmailId = new javax.swing.JTextField();
        lblEmailId = new javax.swing.JLabel();
        lblYearsOfExp = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtYearsOfExp = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtSpecialization = new javax.swing.JTextField();
        lblDoctorId = new javax.swing.JLabel();
        lblSpecialization = new javax.swing.JLabel();
        txtDoctorId = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnClear = new javax.swing.JButton();
        txtPhNo1 = new javax.swing.JTextField();
        lblPhNo1 = new javax.swing.JLabel();
        lblHospital = new javax.swing.JLabel();
        txtHospital = new javax.swing.JComboBox<>();
        txtGender = new javax.swing.JComboBox<>();
        lblState = new javax.swing.JLabel();
        txtCity = new javax.swing.JComboBox<>();
        txtCountry = new javax.swing.JComboBox<>();
        lblCountry = new javax.swing.JLabel();
        txtState = new javax.swing.JComboBox<>();
        txtCommunity = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();

        lblPhNo.setText("Phone No: ");

        txtPhNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhNoActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Doctor Screen");

        tableDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Doctor Id", "Name", "Specialization", "Age", "Gender", "Phone No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPaneDoctor.setViewportView(tableDoctor);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnEdit1.setText("Edit");
        btnEdit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit1ActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblRole.setText("Role:");

        lblGender.setText("Gender: ");

        txtRole.setEditable(false);
        txtRole.setText("Doctor");

        lblAge.setText("Age: ");

        txtEmailId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailIdActionPerformed(evt);
            }
        });

        lblEmailId.setText("Email Id:");

        lblYearsOfExp.setText("Years of Experience:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtYearsOfExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearsOfExpActionPerformed(evt);
            }
        });
        txtYearsOfExp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtYearsOfExpKeyPressed(evt);
            }
        });

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });
        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAgeKeyPressed(evt);
            }
        });

        lblCity.setText("City:");

        lblCommunity.setText("Community:");

        lblUsername.setText("Username:");

        txtSpecialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSpecializationActionPerformed(evt);
            }
        });

        lblDoctorId.setText("Doctor Id:");

        lblSpecialization.setText("Specialization:");

        txtDoctorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorIdActionPerformed(evt);
            }
        });
        txtDoctorId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDoctorIdKeyPressed(evt);
            }
        });

        lblPassword.setText("Password:");

        lblName.setText("Name: ");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtPhNo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhNo1ActionPerformed(evt);
            }
        });
        txtPhNo1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPhNo1KeyPressed(evt);
            }
        });

        lblPhNo1.setText("Phone No: ");

        lblHospital.setText("Hospital:");

        txtGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "Male", "Female", "Others" }));

        lblState.setText("State:");

        lblCountry.setText("Country:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblSearch.setText("Search:");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addGap(29, 29, 29)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnEdit1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnCreate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(62, 62, 62)
                            .addComponent(scrollPaneDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(1, 1, 1)
                                            .addComponent(lblRole))
                                        .addComponent(lblPhNo1)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblEmailId)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblAge)
                                                .addComponent(lblGender)
                                                .addComponent(lblName))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblUsername)
                                        .addGap(5, 5, 5)))
                                .addComponent(lblDoctorId))
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtDoctorId, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtName)
                                            .addComponent(txtUsername)
                                            .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmailId, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPhNo1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnClear))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblYearsOfExp)
                                                .addComponent(lblSpecialization)
                                                .addComponent(lblCommunity)
                                                .addComponent(lblState)
                                                .addComponent(lblPassword)
                                                .addComponent(lblHospital)
                                                .addComponent(lblCountry)
                                                .addComponent(lblCity))
                                            .addGap(36, 36, 36)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtYearsOfExp, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))))))))
                .addGap(42, 87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete))
                    .addComponent(scrollPaneDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblRole))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDoctorId)
                                    .addComponent(txtDoctorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblUsername))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCountry)
                                    .addComponent(txtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblName))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblState)
                                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblAge))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCity)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGender)
                                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblCommunity)
                                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmailId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblEmailId))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhNo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPhNo1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblHospital)
                                    .addComponent(txtHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSpecialization))
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblYearsOfExp)
                                    .addComponent(txtYearsOfExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 65, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
        model.setRowCount(0);
        
        for(Doctor doc : doctorList.getDoctorList()){
            
            Object[] row = new Object[6];
            row[0] = doc; 
            row[1] = doc.getName();
            row[2] = doc.getSpecialization();
            row[3] = doc.getAge();
            row[4] = doc.getGender();
            row[5] = doc.getPhno();
             
            model.addRow(row);
        }
    }
    
    private void txtPhNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhNoActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtDoctorId.setText("");
        txtUsername.setText("");
        txtName.setText("");
        txtAge.setText("");
        txtGender.setSelectedIndex(0);
        txtPhNo1.setText("");
        txtEmailId.setText("");
        txtHospital.setSelectedIndex(0);
        txtSpecialization.setText((""));
        txtYearsOfExp.setText("");
//        txtSalary.setText("");
        txtCity.setSelectedIndex(0);
        txtCommunity.setSelectedIndex(0);
        txtState.setSelectedIndex(0);
        txtCountry.setSelectedIndex(0);
        txtPassword.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        btnClear.setVisible(false);
        Integer selectedRowIndex = tableDoctor.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
            Doctor selectedDoc = (Doctor) model.getValueAt(selectedRowIndex,0);

            doctorList.deleteDoctor(selectedDoc);

            JOptionPane.showMessageDialog(this, "Patient deleted successfully.");
            populateTable();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEdit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit1ActionPerformed
        // TODO add your handling code here:
       
        btnClear.setVisible(true);
   
        Integer selectedRowIndex = tableDoctor.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{

            
            DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
            Doctor selectedDoc = (Doctor) model.getValueAt(selectedRowIndex,0);

            selectedDoc.setDoctorId(Integer.parseInt(txtDoctorId.getText()));
            selectedDoc.setUsername(txtUsername.getText());
            selectedDoc.setName(txtName.getText());
            selectedDoc.setAge(Integer.parseInt(txtAge.getText()));
            selectedDoc.setGender(String.valueOf(txtGender.getSelectedItem()));
            selectedDoc.setPhno(Long.parseLong(txtPhNo1.getText()));
            selectedDoc.setEmail(txtEmailId.getText());
            selectedDoc.setSpecialization(txtSpecialization.getText());
            selectedDoc.setHospital(String.valueOf(txtHospital.getSelectedItem()));
            selectedDoc.setYearsOfExp(Integer.parseInt(txtYearsOfExp.getText()));
//            selectedDoc.setSalary(Long.parseLong(txtSalary.getText()));
            selectedDoc.setCity(String.valueOf(txtCity.getSelectedItem()));
            selectedDoc.setCommunity(String.valueOf(txtCommunity.getSelectedItem()));
            selectedDoc.setState(String.valueOf(txtState.getSelectedItem()));
//            selectedDoc.setAddress(txtAddress.getText());
            selectedDoc.setCountry(String.valueOf(txtCountry.getSelectedItem()));
            selectedDoc.setPassword(txtPassword.getText());

            JOptionPane.showMessageDialog(this, "Doctor details updated successfully.");

            populateTable();

        }
    }//GEN-LAST:event_btnEdit1ActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
//        btnSave.setVisible(false);
        btnClear.setVisible(true);
        
        Integer selectedRowIndex = tableDoctor.getSelectedRow();

        if (selectedRowIndex<0){

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        }

        else{
            DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
            Doctor selectedDoc = (Doctor) model.getValueAt(selectedRowIndex,0);

            txtDoctorId.setText(String.valueOf(selectedDoc.getDoctorId()));
            txtUsername.setText(selectedDoc.getUsername());
            txtName.setText(selectedDoc.getName());
            txtAge.setText(String.valueOf(selectedDoc.getAge()));
            txtGender.setSelectedItem(selectedDoc.getGender());
            txtPhNo1.setText(String.valueOf(selectedDoc.getPhno()));
            txtEmailId.setText(selectedDoc.getEmail());
            txtHospital.setSelectedItem(selectedDoc.getHospital());
            txtSpecialization.setText(selectedDoc.getSpecialization());
            txtYearsOfExp.setText(String.valueOf(selectedDoc.getYearsOfExp()));
//            txtSalary.setText(String.valueOf(selectedDoc.getSalary()));
            txtCity.setSelectedItem(selectedDoc.getCity());
            txtCommunity.setSelectedItem(selectedDoc.getCommunity());
            txtState.setSelectedItem(selectedDoc.getState());
//            txtAddress.setText(selectedDoc.getAddress());
            txtCountry.setSelectedItem(selectedDoc.getCountry());
            txtPassword.setText(selectedDoc.getPassword());
            
            
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void txtYearsOfExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearsOfExpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearsOfExpActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtEmailIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailIdActionPerformed

    private void txtSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSpecializationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSpecializationActionPerformed

    private void txtPhNo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhNo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhNo1ActionPerformed

    private void txtDoctorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorIdActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        String searchQuery = txtSearch.getText();
        Search(searchQuery);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtDoctorIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDoctorIdKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtDoctorId.setEditable(false);
        }
        else{
            txtDoctorId.setEditable(true);
        }
    }//GEN-LAST:event_txtDoctorIdKeyPressed

    private void txtAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtAge.setEditable(false);
        }
        else{
            txtAge.setEditable(true);
        }
    }//GEN-LAST:event_txtAgeKeyPressed

    private void txtYearsOfExpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtYearsOfExpKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtYearsOfExp.setEditable(false);
        }
        else{
            txtYearsOfExp.setEditable(true);
        }
    }//GEN-LAST:event_txtYearsOfExpKeyPressed

    private void txtPhNo1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhNo1KeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtPhNo1.setEditable(false);
        }
        else{
            txtPhNo1.setEditable(true);
        }
    }//GEN-LAST:event_txtPhNo1KeyPressed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        //        btnClear.setVisible(false);
        String role = txtRole.getText();
        try {
            Integer docId = Integer.parseInt(txtDoctorId.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter Doctor Id");
            return;
        }
        Integer doctorId = Integer.parseInt(txtDoctorId.getText());
        if(doctorList.uiqueDoctorId(doctorId) == false){
            JOptionPane.showMessageDialog(this, "Doctor Id already exist");
            return;
        }

        String username = txtUsername.getText();
        if (username.equals("")){
            JOptionPane.showMessageDialog(this, "Please enter Username");
            return;
        }
        else if(doctorList.uniqueDoctorUsername(username) == false){
            JOptionPane.showMessageDialog(this, "Username already exist");
            return;
        }

        String name = txtName.getText();
        if (name.equals("")){
            JOptionPane.showMessageDialog(this, "Please enter the Name");
            return;
        }

        try {
            Integer ag= Integer.parseInt(txtAge.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter the Age");
            return;
        }

        Integer age = Integer.parseInt(txtAge.getText());
        if (txtAge.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter the Age");
            return;
        }

        String gender = String.valueOf(txtGender.getSelectedItem());
        if (txtGender.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Gender");
            return;
        }

        try {
            Long ph = Long.parseLong(txtPhNo1.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter Community Id");
            return;
        }

        Long phno1 = Long.parseLong(txtPhNo1.getText());
        String phNo = String.valueOf(phno1);
        if (phNo.equals("")){
            JOptionPane.showMessageDialog(this, "Please enter the Phone number");
            return;
        }
        if (phNo.length()!= 10){
            JOptionPane.showMessageDialog(this, "Please enter a valid Phone number");
            return;
        }
        String email = txtEmailId.getText();
        if (email.matches("(.*)@(.*).com")){

        }
        else{
            JOptionPane.showMessageDialog(this, "Please enter a valid Email Id");
            return;
        }
        String hospital = String.valueOf(txtHospital.getSelectedItem());
        if (txtHospital.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Hospital.");
            return;
        }
        String specialization = txtSpecialization.getText();
        if (txtSpecialization.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter the Specialization.");
            return;
        }
        //        Long salary = Long.parseLong(txtSalary.getText());
        Integer yearsOfExp = Integer.parseInt(txtYearsOfExp.getText());
        if (txtYearsOfExp.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter the Years of Experience.");
            return;
        }
        String city = String.valueOf(txtCity.getSelectedItem());
        if (txtCity.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the City.");
            return;
        }
        String community = String.valueOf(txtCommunity.getSelectedItem());
        if (txtCommunity.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Community.");
            return;
        }
        String state = String.valueOf(txtState.getSelectedItem());
        if (txtState.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the State.");
            return;
        }
        String country = String.valueOf(txtCountry.getSelectedItem());
        if (txtCountry.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Country.");
            return;
        }
        char[] pass = txtPassword.getPassword();
        String password = new String(pass);
        if (txtPassword.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter the Password.");
            return;
        }

        Doctor newDoctor = doctorList.addDoctor();

        newDoctor.setRole(role);
        newDoctor.setDoctorId(doctorId);
        newDoctor.setUsername(username);
        newDoctor.setName(name);
        newDoctor.setAge(age);
        newDoctor.setGender(gender);
        newDoctor.setPhno(phno1);
        newDoctor.setEmail(email);
        newDoctor.setHospital(hospital);
        newDoctor.setSpecialization(specialization);
        newDoctor.setYearsOfExp(yearsOfExp);
        //        newDoctor.setSalary(salary);
        newDoctor.setCity(city);
        newDoctor.setCommunity(community);
        newDoctor.setState(state);
        newDoctor.setCountry(country);
        newDoctor.setPassword(password);

        JOptionPane.showMessageDialog(this, "Doctor Created Successfully");

        txtDoctorId.setText("");
        txtUsername.setText("");
        txtName.setText("");
        txtAge.setText("");
        txtGender.setSelectedIndex(0);
        txtPhNo1.setText("");
        txtEmailId.setText("");
        txtHospital.setSelectedIndex(0);
        txtSpecialization.setText((""));
        txtYearsOfExp.setText("");
        //        txtSalary.setText("");
        txtCity.setSelectedIndex(0);
        txtCommunity.setSelectedIndex(0);
        txtState.setSelectedIndex(0);
        txtCountry.setSelectedIndex(0);
        txtPassword.setText("");

        populateTable();
    }//GEN-LAST:event_btnCreateActionPerformed

    public void populateHospital(){
        String[] hosArr = hospitalList.hosArray();
        DefaultComboBoxModel h = new DefaultComboBoxModel(hosArr);
        txtHospital.setModel(h);
    }
    
    public void populateCity(){
        String[] cityArr = cityList.cityArray();
        DefaultComboBoxModel c = new DefaultComboBoxModel(cityArr);
        txtCity.setModel(c);
    }
    
    public void populateState(){
        String[] stateArr = cityList.stateArray();
        DefaultComboBoxModel s = new DefaultComboBoxModel(stateArr);
        txtState.setModel(s);
    }
    
    public void populateCountry(){
        String[] countryArr = cityList.countryArray();
        DefaultComboBoxModel c = new DefaultComboBoxModel(countryArr);
        txtCountry.setModel(c);
    }
    
     public void populateComm(){
        String[] commArr = communityList.commArray();
        DefaultComboBoxModel c = new DefaultComboBoxModel(commArr);
        txtCommunity.setModel(c);
    }
    
    private void Search(String searchQuery){
        DefaultTableModel model = (DefaultTableModel) tableDoctor.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        
        tableDoctor.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(searchQuery));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit1;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCountry;
    private javax.swing.JLabel lblDoctorId;
    private javax.swing.JLabel lblEmailId;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHospital;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhNo;
    private javax.swing.JLabel lblPhNo1;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSpecialization;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblYearsOfExp;
    private javax.swing.JScrollPane scrollPaneDoctor;
    private javax.swing.JTable tableDoctor;
    private javax.swing.JTextField txtAge;
    private javax.swing.JComboBox<String> txtCity;
    private javax.swing.JComboBox<String> txtCommunity;
    private javax.swing.JComboBox<String> txtCountry;
    private javax.swing.JTextField txtDoctorId;
    private javax.swing.JTextField txtEmailId;
    private javax.swing.JComboBox<String> txtGender;
    private javax.swing.JComboBox<String> txtHospital;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPhNo;
    private javax.swing.JTextField txtPhNo1;
    private javax.swing.JTextField txtRole;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSpecialization;
    private javax.swing.JComboBox<String> txtState;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtYearsOfExp;
    // End of variables declaration//GEN-END:variables
}
