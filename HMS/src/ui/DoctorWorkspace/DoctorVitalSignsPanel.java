/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.DoctorWorkspace;

import Hospital.Doctor.Doctor;
import Hospital.Doctor.DoctorDirectory;
import Hospital.Encounter.Encounter;
import Hospital.Encounter.EncounterDirectory;
import Hospital.Hospital.HospitalDirectory;
import Hospital.Patient.PatientDirectory;
import Hospital.VitalSigns.VitalSign;
import Hospital.VitalSigns.VitalSignDirectory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import ui.PatientWorkspace.PatientDashboard;

/**
 *
 * @author chinm
 */
public class DoctorVitalSignsPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorVitalSignsPanel
     */
    private VitalSignDirectory vitalSignList;
    private EncounterDirectory encounterList;
    private HospitalDirectory hospitalList;
    private PatientDirectory patientList;
    private DoctorDirectory doctorList;
    private Doctor doctor;

    public DoctorVitalSignsPanel(Doctor doctor, VitalSignDirectory vitalSignList, EncounterDirectory encounterList, HospitalDirectory hospitalList, PatientDirectory patientList, DoctorDirectory doctorList) {
        initComponents();
        this.vitalSignList = vitalSignList;
        this.encounterList = encounterList;
        this.hospitalList = hospitalList;
        this.doctorList = doctorList;
        this.patientList = patientList;
        this.doctor = doctor;
        txtDoctor.setText(doctor.getUsername());
        populateTable();
        populateEncounter();
        populateHospital();
        populatePatient();

        btnClear.setVisible(false);
        btnSave.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnEdit1 = new javax.swing.JButton();
        scrollPaneEncounter = new javax.swing.JScrollPane();
        tableVS = new javax.swing.JTable();
        lblEncounterNo = new javax.swing.JLabel();
        lblCreatedBy = new javax.swing.JLabel();
        lblPatientName = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JComboBox<>();
        lblHospital = new javax.swing.JLabel();
        txtHospital = new javax.swing.JComboBox<>();
        lblBloodGroup = new javax.swing.JLabel();
        txtBloodGroup = new javax.swing.JComboBox<>();
        lblPresc = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPrescription = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtDoctor = new javax.swing.JTextField();
        lblBP = new javax.swing.JLabel();
        txtBp = new javax.swing.JTextField();
        txtPulse = new javax.swing.JTextField();
        lblPulse = new javax.swing.JLabel();
        lblTemp = new javax.swing.JLabel();
        txtTemp = new javax.swing.JTextField();
        txtEncounterNo = new javax.swing.JComboBox<>();
        txtPatientUname = new javax.swing.JComboBox<>();
        lblPatientUname = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Vital Signs Screen");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnEdit1.setText("Edit");
        btnEdit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit1ActionPerformed(evt);
            }
        });

        tableVS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Encounter No", "Patient", "Blood Group", "BP", "Pulse", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPaneEncounter.setViewportView(tableVS);

        lblEncounterNo.setText("Encounter No:");

        lblCreatedBy.setText("Created By:");

        lblPatientName.setText("Patient Name:");

        lblHospital.setText("Hospital:");

        lblBloodGroup.setText("Blood Group:");

        txtBloodGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "A+", "B+", "O+", "AB+", "A-", "B-", "O-", "AB-" }));

        lblPresc.setText("Prescription:");

        txtPrescription.setColumns(20);
        txtPrescription.setRows(5);
        jScrollPane1.setViewportView(txtPrescription);

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtDoctor.setEditable(false);

        lblBP.setText("BP:");

        txtBp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBpKeyPressed(evt);
            }
        });

        txtPulse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPulseKeyPressed(evt);
            }
        });

        lblPulse.setText("Pulse:");

        lblTemp.setText("Temperature:");

        txtTemp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTempKeyPressed(evt);
            }
        });

        lblPatientUname.setText("Patient Username:");

        lblSearch.setText("Search:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPatientName)
                                .addComponent(lblHospital)
                                .addComponent(lblEncounterNo)
                                .addComponent(lblPatientUname))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblPresc)
                                .addComponent(lblBP)
                                .addComponent(lblPulse)
                                .addComponent(lblTemp))
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addComponent(txtBp)
                                .addComponent(txtPulse)
                                .addComponent(txtTemp)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblSearch)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(btnEdit1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(54, 54, 54)
                                        .addComponent(scrollPaneEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblCreatedBy)
                                            .addComponent(lblBloodGroup))
                                        .addGap(68, 68, 68)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(txtDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtPatientName, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtHospital, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtEncounterNo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtPatientUname, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit1))
                    .addComponent(scrollPaneEncounter, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBP)
                            .addComponent(txtBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPulse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPulse))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTemp)
                            .addComponent(txtTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPresc)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear)
                            .addComponent(btnSave)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEncounterNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEncounterNo))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblHospital)
                            .addComponent(txtHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientUname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPatientUname))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCreatedBy)
                            .addComponent(txtDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBloodGroup))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        //        btnClear.setVisible(false);
        String encounterNo = String.valueOf(txtEncounterNo.getSelectedItem());
        if (txtEncounterNo.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Encounter No.");
            return;
        }
        String hospital = String.valueOf(txtHospital.getSelectedItem());
        if (txtHospital.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Hospital.");
            return;
        }
        String createdBy = txtDoctor.getText();
        
//        String doctorUsername = String.valueOf(txtDoctorUsername.getSelectedItem());
        String patientName = String.valueOf(txtPatientName.getSelectedItem());
        if (txtPatientName.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Patient.");
            return;
        }
        String patientUsername = String.valueOf(txtBloodGroup.getSelectedItem());
        if (txtPatientUname.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the respective Patient Username.");
            return;
        }
//        Integer roomNo = Integer.parseInt(txtRoomNo.getText());
        String bloodGroup = String.valueOf(txtBloodGroup.getSelectedItem());
        if (txtBloodGroup.getSelectedItem().equals("--Select--")){
            JOptionPane.showMessageDialog(this, "Please select the Blood Group.");
            return;
        }
        
        try {
            Integer b = Integer.parseInt(txtBp.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter the BP.");
            return;
        }
        Integer bp = Integer.parseInt(txtBp.getText());
        if(bp < 0){
            JOptionPane.showMessageDialog(this, "Please enter the valid BP value.");
            return;
        }
        try {
            Integer p = Integer.parseInt(txtPulse.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter the Pulse.");
            return;
        }
        Integer pulse = Integer.parseInt(txtPulse.getText());
        if(pulse < 0){
            JOptionPane.showMessageDialog(this, "Please enter the valid Pulse value.");
            return;
        }
        try {
            Integer t = Integer.parseInt(txtTemp.getText());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this,"Please enter the Temperature.");
            return;
        }
        Integer temp = Integer.parseInt(txtTemp.getText());
        if(temp < 0){
            JOptionPane.showMessageDialog(this, "Please enter the valid Temperature value.");
            return;
        }
        String presc = txtPrescription.getText();
        
        VitalSign newVS = vitalSignList.addVitalSign();

        newVS.setEncounterNo(encounterNo);
        newVS.setHospital(hospital);
        newVS.setDoctorName(createdBy);
//        newVS.setDoctorUserName(doctorUsername);
        newVS.setPatientName(patientName);
        newVS.setPatientUsername(patientUsername);
//        newVS.setRooomNo(roomNo);
//        newVS.setDate(date);
//        newVS.setTime(time);
        newVS.setBloodGroup(bloodGroup);
        newVS.setBp(bp);
        newVS.setPulse(pulse);
        newVS.setTemp(temp);
        newVS.setComment(presc);

        JOptionPane.showMessageDialog(this, "Vital Sign Created Successfully");

        txtEncounterNo.setSelectedIndex(0);
        txtHospital.setSelectedIndex(0);
        
//        txtDoctorUsername.setSelectedIndex(0);
        txtPatientName.setSelectedIndex(0);
        txtPatientUname.setSelectedIndex(0);
        txtBloodGroup.setSelectedIndex(0);
        txtBp.setText("");
        txtPulse.setText("");
        txtTemp.setText("");
//        txtRoomNo.setText("");
//        txtDate.setText("");
//        txtTime.setText("");
        txtPrescription.setText("");

        populateTable();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        //        btnSave.setVisible(false);
        btnClear.setVisible(true);
        btnSave.setVisible(false);
        Integer selectedRowIndex = tableVS.getSelectedRow();

        if (selectedRowIndex < 0) {

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) tableVS.getModel();
            VitalSign selectedVS = (VitalSign) model.getValueAt(selectedRowIndex, 0);

            txtEncounterNo.setSelectedItem(String.valueOf(selectedVS.getEncounterNo()));
            txtHospital.setSelectedItem(selectedVS.getHospital());
            
//            txtDoctorUsername.setSelectedItem(selectedVS.getDoctorUserName());
            txtPatientName.setSelectedItem(selectedVS.getPatientName());
            txtPatientUname.setSelectedItem(selectedVS.getPatientUsername());
            txtBloodGroup.setSelectedItem(String.valueOf(selectedVS.getBloodGroup()));
//            txtRoomNo.setText(String.valueOf(selectedVS.getRooomNo()));
//            txtDate.setText(selectedVS.getDate());
//            txtTime.setText(selectedVS.getTime());
            txtBp.setText(String.valueOf(selectedVS.getBp()));
            txtPulse.setText(String.valueOf(selectedVS.getPulse()));
            txtTemp.setText(String.valueOf(selectedVS.getTemp()));
            txtPrescription.setText(selectedVS.getComment());

        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnEdit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit1ActionPerformed
        // TODO add your handling code here:
        btnSave.setVisible(true);
        btnClear.setVisible(true);

        btnClear.setVisible(true);
        Integer selectedRowIndex = tableVS.getSelectedRow();

        if (selectedRowIndex < 0) {

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) tableVS.getModel();
            VitalSign selectedVS = (VitalSign) model.getValueAt(selectedRowIndex, 0);

            txtEncounterNo.setSelectedItem(String.valueOf(selectedVS.getEncounterNo()));
            txtHospital.setSelectedItem(selectedVS.getHospital());
            
//            txtDoctorUsername.setSelectedItem(selectedVS.getDoctorUserName());
            txtPatientName.setSelectedItem(selectedVS.getPatientName());
            txtPatientUname.setSelectedItem(selectedVS.getPatientUsername());
            txtBloodGroup.setSelectedItem(String.valueOf(selectedVS.getBloodGroup()));
//            txtRoomNo.setText(String.valueOf(selectedVS.getRooomNo()));
//            txtDate.setText(selectedVS.getDate());
//            txtTime.setText(selectedVS.getTime());
            txtBp.setText(String.valueOf(selectedVS.getBp()));
            txtPulse.setText(String.valueOf(selectedVS.getPulse()));
            txtTemp.setText(String.valueOf(selectedVS.getTemp()));
            txtPrescription.setText(selectedVS.getComment());

        }
    }//GEN-LAST:event_btnEdit1ActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtEncounterNo.setSelectedIndex(0);
        txtHospital.setSelectedIndex(0);
    
//        txtDoctorUsername.setSelectedIndex(0);
        txtPatientName.setSelectedIndex(0);
        txtPatientUname.setSelectedIndex(0);
        txtBloodGroup.setSelectedIndex(0);
        txtBp.setText("");
        txtPulse.setText("");
        txtTemp.setText("");
//        txtRoomNo.setText("");
//        txtDate.setText("");
//        txtTime.setText("");
        txtPrescription.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        Integer selectedRowIndex = tableVS.getSelectedRow();

        if (selectedRowIndex < 0) {

            JOptionPane.showMessageDialog(this, "Please select a row to view.");
            return;
        } else {
            DefaultTableModel model = (DefaultTableModel) tableVS.getModel();
            VitalSign selectedVS = (VitalSign) model.getValueAt(selectedRowIndex, 0);

            selectedVS.setEncounterNo(String.valueOf(txtEncounterNo.getSelectedItem()));
            selectedVS.setHospital(String.valueOf(txtHospital.getSelectedItem()));
            selectedVS.setDoctorName(String.valueOf(txtDoctor.getText()));
//            selectedVS.setDoctorUserName(String.valueOf(txtDoctorUsername.getSelectedItem()));
            selectedVS.setPatientName(String.valueOf(txtPatientName.getSelectedItem()));
            selectedVS.setPatientUsername(String.valueOf((txtBloodGroup.getSelectedItem())));
            selectedVS.setBloodGroup(String.valueOf(txtBloodGroup.getSelectedItem()));
            selectedVS.setBp(Integer.parseInt(txtBp.getText()));
            selectedVS.setPulse(Integer.parseInt(txtPulse.getText()));
            selectedVS.setTemp(Integer.parseInt(txtTemp.getText()));
//            selectedVS.setRooomNo(Integer.parseInt(txtRoomNo.getText()));
//            selectedVS.setDate(txtDate.getText());
//            selectedVS.setTime(txtTime.getText());
            selectedVS.setComment(txtPrescription.getText());

            JOptionPane.showMessageDialog(this, "Vital Sign details updated successfully.");

            populateTable();

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        String searchQuery = txtSearch.getText();
        Search(searchQuery);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtBpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBpKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtBp.setEditable(false);
        }
        else{
            txtBp.setEditable(true);
        }
    }//GEN-LAST:event_txtBpKeyPressed

    private void txtPulseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPulseKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtPulse.setEditable(false);
        }
        else{
            txtPulse.setEditable(true);
        }
    }//GEN-LAST:event_txtPulseKeyPressed

    private void txtTempKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTempKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c)){
            txtTemp.setEditable(false);
        }
        else{
            txtTemp.setEditable(true);
        }
    }//GEN-LAST:event_txtTempKeyPressed

    private void Search(String searchQuery){
        DefaultTableModel model = (DefaultTableModel) tableVS.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        
        tableVS.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(searchQuery));
    }
    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tableVS.getModel();
        model.setRowCount(0);

        for (VitalSign vs : vitalSignList.getVitalSignList()) {

            
                Object[] row = new Object[6];
                row[0] = vs;
                row[1] = vs.getPatientName();
                row[2] = vs.getBloodGroup();
                row[3] = vs.getBp();
                row[4] = vs.getPulse();
                row[5] = vs.getTemp();

                model.addRow(row);
            
        }
    }

    public void populateEncounter() {
        String[] enArr = encounterList.enArray();
        DefaultComboBoxModel e = new DefaultComboBoxModel(enArr);
        txtEncounterNo.setModel(e);
    }

    public void populateHospital() {
        String[] hosArr = hospitalList.hosArray();
        DefaultComboBoxModel h = new DefaultComboBoxModel(hosArr);
        txtHospital.setModel(h);
    }

//    public void populateDoctor(){
//        String[] docNameArr = doctorList.docNameArray();
//        DefaultComboBoxModel dn = new DefaultComboBoxModel(docNameArr);
//        txtDoctor.setModel(dn);
//        String[] docUnameArr = doctorList.docUnameArray();
//        DefaultComboBoxModel du = new DefaultComboBoxModel(docUnameArr);
//        txtDoctorUsername.setModel(du);   
//    }
    public void populatePatient() {
        String[] patNameArr = patientList.patNameArray();
        DefaultComboBoxModel pn = new DefaultComboBoxModel(patNameArr);
        txtPatientName.setModel(pn);

        String[] patUnameArr = patientList.patUnameArray();
        DefaultComboBoxModel pu = new DefaultComboBoxModel(patUnameArr);
        txtPatientUname.setModel(pu);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnEdit1;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblBloodGroup;
    private javax.swing.JLabel lblCreatedBy;
    private javax.swing.JLabel lblEncounterNo;
    private javax.swing.JLabel lblHospital;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPatientUname;
    private javax.swing.JLabel lblPresc;
    private javax.swing.JLabel lblPulse;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTemp;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollPane scrollPaneEncounter;
    private javax.swing.JTable tableVS;
    private javax.swing.JComboBox<String> txtBloodGroup;
    private javax.swing.JTextField txtBp;
    private javax.swing.JTextField txtDoctor;
    private javax.swing.JComboBox<String> txtEncounterNo;
    private javax.swing.JComboBox<String> txtHospital;
    private javax.swing.JComboBox<String> txtPatientName;
    private javax.swing.JComboBox<String> txtPatientUname;
    private javax.swing.JTextArea txtPrescription;
    private javax.swing.JTextField txtPulse;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTemp;
    // End of variables declaration//GEN-END:variables
}
